# Runs CI tests and generates wheels on the following platforms:
#
# * Linux (py2 and py3)
# * macOS (py2 and py3)
# * Windows (py3, py2 is done by appveyor)
#
# Useful URLs:
# * https://github.com/pypa/cibuildwheel
# * https://github.com/actions/checkout
# * https://github.com/actions/setup-python
# * https://github.com/actions/upload-artifact
# * https://github.com/marketplace/actions/cancel-workflow-action

on:
  pull_request:
  push:
    branches: master
  release:
    types: [released, prereleased]
  workflow_dispatch:  # allows running workflow manually from the Actions tab
permissions:
  contents: write
name: build
jobs:
  tag:
    # additionally create a release for every commit to master
    if: github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - uses: ncipollo/release-action@v1
        with:
          commit: ${{ github.sha }}
          tag: ${{ github.run_id }}
          generateReleaseNotes: true

  # Linux + macOS + Windows CPython 3.6+
  py3:
    name: py3, ${{ matrix.os }}, ${{ matrix.archs }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        include:
        - os: ubuntu-latest
          archs: "x86_64 i686"
        - os: ubuntu-latest
          archs: "aarch64"
        - os: macos-12
          archs: "x86_64 arm64"

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: 3.11

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v2
      if: matrix.archs == 'aarch64'

    - name: Create wheels + run tests
      uses: pypa/cibuildwheel@v2.12.0
      with:
        config-file: "./cibuildwheel.toml"
      env:
        CIBW_ARCHS: ${{ matrix.archs }}

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: wheelhouse
        
    - uses: softprops/action-gh-release@v1
      # additionally create a release for every commit to master
      if: github.event_name == 'release' || github.event_name == 'push'
      with:
        files: wheelhouse/*.whl
        tag_name: ${{ github.event_name == 'release' && github.ref || github.run_id }}

    - name: Generate .tar.gz
      if: matrix.os == 'ubuntu-latest'
      run: |
        pip install -U wheel
        make generate-manifest
        python setup.py sdist
        mv dist/psutil*.tar.gz wheelhouse/

  # Linux + macOS + Python 2
  py2:
    name: py2-${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 20
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-12]
    env:
      CIBW_TEST_COMMAND:
        PYTHONWARNINGS=always PYTHONUNBUFFERED=1 PSUTIL_DEBUG=1 python {project}/psutil/tests/runner.py &&
        PYTHONWARNINGS=always PYTHONUNBUFFERED=1 PSUTIL_DEBUG=1 python {project}/psutil/tests/test_memleaks.py
      CIBW_TEST_EXTRAS: test
      CIBW_BUILD: 'cp27-*'

    steps:
    - name: Cancel previous runs
      uses: styfle/cancel-workflow-action@0.11.0
      with:
        access_token: ${{ github.token }}

    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
      with:
        python-version: 3.9

    - name: Create wheels + run tests
      uses: pypa/cibuildwheel@v2

    - name: Upload wheels
      uses: actions/upload-artifact@v3
      with:
        name: wheels
        path: wheelhouse

    - uses: softprops/action-gh-release@v1
      # additionally create a release for every commit to master
      if: github.event_name == 'release' || github.event_name == 'push'
      with:
        files: wheelhouse/*.whl
        tag_name: ${{ github.event_name == 'release' && github.ref || github.run_id }}

    - name: Generate .tar.gz
      if: matrix.os == 'ubuntu-latest'
      run: |
        pip install -U wheel
        make generate-manifest
        python setup.py sdist
        mv dist/psutil*.tar.gz wheelhouse/

  # Run linters
  linters:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - uses: actions/setup-python@v4
    - name: 'Run linters'
      run: |
        # py3
        python3 -m pip install flake8 isort
        python3 -m flake8 .
        python3 -m isort .
        # clinter
        find . -type f \( -iname "*.c" -o -iname "*.h" \) | xargs python3 scripts/internal/clinter.py

  # Check sanity of .tar.gz + wheel files
  check-dist:
    needs: [py2, py3]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-python@v4
        with:
          python-version: 3.x
      - uses: actions/download-artifact@v3
        with:
          name: wheels
          path: wheelhouse
      - run: |
          python scripts/internal/print_hashes.py wheelhouse/
          pipx run twine check --strict wheelhouse/*
          pipx run abi3audit --verbose --strict wheelhouse/*-abi3-*.whl
